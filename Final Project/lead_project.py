# -*- coding: utf-8 -*-
"""Lead_Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-IymCOvXsilHVAZRb8vQZuQGGJsDix_4

# Lead Contamination Project in the Allegheny County
"""

import gurobipy as gp
from gurobipy import GRB
import pandas as pd
import numpy as np

#Import Population per census tract i pop[i]
pop_cens_tract = pd.read_excel(r'population_by_census_tract.xlsx')
pop = pop_cens_tract['total_Population'].values.tolist()

#Number of children under 9 d[i] per census tract
d = (pop_cens_tract['pop_below_nine']).fillna(0).values.tolist()

#Per POD data
per_pod = pd.read_csv('PODs_Coordinates.csv')

#Operating costs per POD c[j]
c = per_pod.operating_costs.values.tolist()

#Water storage capacity for POD j f[j]
f = per_pod.water_storage.values.tolist()

#Travel time from the airport to every POD j ta[j] in hours
ta = (per_pod.travel_time_airport_min / 60).values.tolist()

#Total Budget Allowed ---------- TO BE GIVEN
B = 10e6

#Quantity of supplied item k required by a person a[k] a[0] medicine, a[1] water
a = [1, 1]

#Travel time from census tract i to POD j tt[i,j]
tt = pd.read_excel(r'census_POD_travelMatrix_min.xlsx')
tt = tt.drop(columns='tt')
tt = tt.values.tolist()

#Travel time from water supply facility w to POD j ts[j]
ts = pd.read_excel(r'POD_watersupply_time.xlsx')
ts = ts.time_min
ts = ts.values.tolist()

#Water capacity per truck in gallons 
tr = 5000

#Cost of using every truck per hour - includes rental costs and gasoline
ctr = int(426/24)

## Indices

#Number of Demand locations/census tracts i
locations = range(len(pop))

#Number of POD sites in Allegheny County j
sites = range(len(c))

# Number of supplied items k k=0 for DMSA k=1 for clean water
items = range(2)

# Demand scenarios s
scenarios = range(7)

"""## Set Up Optimization Model"""

# Setting up model object
m = gp.Model("food")

# Setting up Decision Variables

# Indicates 1 if POD j is used or 0 otherwise x[j]
x = m.addVars(sites, vtype=GRB.BINARY)

# Indicates 1 if census tract i is assigned to POD j, it indicates 0 otherwise y[i,j]
y = m.addVars(locations, sites, vtype=GRB.BINARY)

# Quantity of supply item k allocated to each POD j q[j,k]
q = m.addVars(sites, items, lb = 0.0)

# Number of trucks to use
ntr = m.addVars(range(2), lb = 0.0)

# Set up two variables to capture the two objectives 
Z = m.addVar(lb = 0.0) # for location + production cost

"""## Objective Function & Constraints"""

#costs
obj_1 = ctr * ntr * sum(ts[j] for j in sites)

#Operation and maintainance costs -- Annual costs to be spent in seven days
obj_2 = sum(c[j] * x[j] for j in sites)

#Travel time from the airport to PODs
obj_3 = sum(ta[j] * x[j] for j in sites)

#Total travel time of the population from every census tract to POD
obj_4 = sum(sum(pop[i] * y[i,j] * tt[i,j] * x[j] for i in locations) for j in sites)

#Maximum travel distance for anyone from every census tract to POD
#obj_5 = pop[i] * y[i,j] * tt[i,j]

objFn = obj_1 + obj_2 + obj_3 + obj_4

m.setObjective(objFn, GRB.MINIMIZE)

##Constraints

#1
m.addConstr(sum(c[j] * x[j] + ntr * ts[j] for j in sites) <= B)

for i in locations:
    
    #2
    m.addConstr(sum(y[i,j] for j in sites) == 1)
    
    for j in sites:
        
        #3
        m.addConstr(y[i,j] <= x[j])
        
for j in sites:
    m.addConstr(q[0,j] >= sum(a[0] * y[i,j] * d[i] for i in locations)
    m.addConstr(q[1,j] >= sum(a[1] * y[i,j] * pop[i] for i in locations)
    m.addConstr(q[1,j] <= f[j])

#7
m.addConstr(tr * ntr == sum(q[j,1] for j in sites))

# Solve
m.optimize()

